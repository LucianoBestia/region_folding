var searchIndex={};
searchIndex["region_folding"] = {"doc":"region_folding","i":[[5,"main","region_folding","The program starts here.",null,[[]]],[5,"enable_ansi_support","","",null,[[]]],[0,"region_folding_mod","","region_folding_mod.rs",null,null],[3,"REGEX_REGION","region_folding::region_folding_mod","",null,null],[12,"__private_field","","",0,null],[3,"REGEX_ENDREGION","","",null,null],[12,"__private_field","","",1,null],[3,"Fold","","struct from rust-analyzer",null,null],[12,"range","","",2,null],[12,"kind","","",2,null],[3,"RegionPos","","",null,null],[12,"start","","",3,null],[12,"end","","",3,null],[4,"FoldKind","","struct from rust-analyzer. Added Region",null,null],[13,"Region","","",4,null],[5,"get_vec_of_fold","","return the Fold vector for Folding regions in rust language",null,[[["str"]],[["vec",["fold"]],["fold"]]]],[5,"get_vec","","find regex for region and endregion combine pairs ofâ€¦",null,[[["str"]],[["regionpos"],["vec",["regionpos"]]]]],[5,"get_str_to_end_of_line","","get str to end of line",null,[[["str"],["usize"]],["str"]]],[5,"print_vec","","print nice for fold vector debug",null,[[["str"],["vec",["fold"]],["fold"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"eq","","",4,[[["foldkind"],["self"]],["bool"]]],[11,"deref","","",0,[[["self"]],["regex"]]],[11,"deref","","",1,[[["self"]],["regex"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"initialize","","",0,[[["self"]]]],[11,"initialize","","",1,[[["self"]]]]],"p":[[3,"REGEX_REGION"],[3,"REGEX_ENDREGION"],[3,"Fold"],[3,"RegionPos"],[4,"FoldKind"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);